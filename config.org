#+TITLE: StumpWM Config
#+AUTHOR: Luca Andriotto
#+PROPERTY: header-args :tangle config
#+auto_tangle: t
#+DESCRIPTION: Il window manager che sto iniziando ad apprezzare.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of Contents :toc:
- [[#initializations][INITIALIZATIONS]]
  - [[#groups][Groups]]
  - [[#variables][Variables]]
  - [[#modularity][Modularity]]
  - [[#system-helpers][System Helpers]]
  - [[#files][Files]]
  - [[#modules][Modules]]
  - [[#keymaps][Keymaps]]
  - [[#runners][Runners]]
  - [[#themes][Themes]]
- [[#appeareance][APPEAREANCE]]
  - [[#parameters][Parameters]]
  - [[#borders][Borders]]
  - [[#desktop-background][Desktop background]]
  - [[#fonts][Fonts]]
  - [[#gaps][Gaps]]
  - [[#messageinput-box][Message/Input box]]
  - [[#startup-message][Startup message]]
  - [[#which-key][Which-key]]
- [[#keybindings][KEYBINDINGS]]
  - [[#applications][Applications]]
  - [[#backlight][Backlight]]
  - [[#buffers][Buffers]]
  - [[#layout][Layout]]
  - [[#movement][Movement]]
  - [[#search][Search]]
  - [[#system][System]]
  - [[#volume][Volume]]
- [[#settings][SETTINGS]]
  - [[#prefix-key][Prefix key]]
  - [[#completion][Completion]]
  - [[#input-devices][Input Devices]]
  - [[#messageinput-box-1][Message/Input box]]
  - [[#modeline][Modeline]]
  - [[#session][Session]]
  - [[#startup][Startup]]
  - [[#windows][Windows]]

* TODO INITIALIZATIONS
Metterei i define dei temi, di tutti i parametri, organizzati per
risorsa, le funzioni helper e i runners.
** Groups
Inserire icone FontAwesome.
#+begin_src lisp
  (in-package :stumpwm)

  ;; creating groups
  (setf (group-name (first (screen-groups (current-screen)))) "web")
  (gnewbg "dev")
  (gnewbg "read")
  (gnewbg "relax")
** Modularity
#+begin_src lisp
  (defun al/load (filename)
    "Load a file FILENAME (without extension) from `al/init-directory'."
    (let ((file (merge-pathnames (concat filename ".lisp")
                                 al/init-directory)))
      (if (probe-file file)
          (load file)
          (format *error-output* "File '~a' doesn't exist." file))))

  (defun al/load-module (name)
    "Load contributed stumpwm module NAME.
  Return nil, if the module does not exist.
  This function is similar to `load-module' command, except it returns nil
  instead of any error."
    (let ((module (find-module (string-downcase name))))
      (and module
           (progn (asdf:operate 'asdf:load-op module)
                  t))))
#+end_src

** System Helpers
*** Battery
#+begin_src lisp
  (defparameter *battery-percent* "")

  (defun get-battery-status ()
    (let* ((batgetcap (run-shell-command "cat /sys/class/power_supply/BAT0/capacity | tr -d '\\r\\n'" t)))
      (setf *battery-percent* (format nil "^6^f1^f0^n ~a% " batgetcap))))

  (defun battery-percentage (ml)
    (declare (ignore ml))
    ,*battery-percent*)

  (run-with-timer 0 10 #'get-battery-status)
  (add-screen-mode-line-formatter #\B #'battery-percentage)
#+end_src

*** Date
Managed by =*time-modeline-string*=

*** Colon
#+begin_src lisp
  ;; prompt the user for an interactive command. The first arg is an
  ;; optional initial contents.
  (defcommand colon1 (&optional (initial "")) (:rest)
    (let ((cmd (read-one-line (current-screen) ": " :initial-input initial)))
      (when cmd
        (eval-command cmd t))))
#+end_src

*** Keybindings
#+begin_src lisp
  (defun tr-define-key (key command)
    (define-key *top-map* (kbd (concat "s-" key )) command)
    (define-key *root-map* (kbd key) command))
#+end_src

*** Search
#+begin_src lisp
;; Web jump (works for DuckDuckGo and Imdb)
(defmacro make-web-jump (name prefix)
  `(defcommand ,(intern name) (search) ((:rest ,(concatenate 'string name " search: ")))
    (nsubstitute #\+ #\Space search)
    (run-shell-command (concatenate 'string ,prefix search))))
#+end_src

** TODO Modules
The modules that are required for the UI to show important pieces of
information and operate on input/output.  Using a [[https://github.com/jamesmccabe/clx-truetype][fork]] from
clx-truetype.
*** Contrib modules
Modules written by the community that I use (or I am interested in using).
#+begin_src lisp
  ;; App menu
  (load-module "app-menu")
  ;; Manage backlight
  (load-module "stump-backlight")
  ;; Battery level
  (load-module "battery-portable")
  ;; "Fuzzy" completion
  (ql:quickload :stumpwm-prescient)
  ;; Font rendering
  (ql:quickload :clx-truetype)
  (load-module "ttf-fonts")
  ;;; Caching the fonts
  (setq clx-truetype::*font-dirs*
        (append (list (namestring (merge-pathnames ".local/share/fonts" (user-homedir-pathname))))
                clx-truetype::*font-dirs*))
  ;; (Multiple) keyboard layouts.
  (load-module "kbd-layouts")
  ;; Gaps for aesthetics
  (load-module "swm-gaps")
  ;; Golden ratio (automatically resize windows)
  (load-module "swm-golden-ratio")
  ;; Hostname
  (load-module "hostname")
  ;; Memory usage
  (load-module "mem")
  ;; Network traffic
  (load-module "net")
  ;; Pomodoro timer to get productive
  (load-module "notifications")
  (load-module "swm-pomodoro")
  ;; Manage end of session
  ;; (add-to-load-path #p"path-to-contrib/util/end-session")
  (load-module "end-session")
  ;; Slynk server
  (ql:quickload :slynk)
  ;; Spatial groups
  ;; (ql:quickload "spatial-groups")
  ;; (load-module "spatial-groups")
  ;; (spatial-groups:install-default-keybinds) ; optional
  ;; Tray
  (load-module "stumptray")
  ;; Weather
  (ql:quickload :stumpwm-weather)
  ;; Winner-mode
  ;; WiFi
  (load-module "wifi")
  ;; Volume level
  (load-module "stump-volume-control")
#+end_src

*** TODO Modules configuration
Distinguere gli elementi *theme-related* da quelli *config-related* e
mantenere in questa sezione solamente i secondi.
**** TODO App menu
Potrebbe essere un buono spunto per realizzare un launcher di applicazioni.
**** Completion
#+begin_src lisp
  (setf *input-refine-candidates-fn* 'stumpwm-prescient:refine-input)
#+end_src
**** Fonts
See APPEAREANCE section.
**** Gaps
See APPEAREANCE section.
**** TODO Golden ratio
Crea keybinding per toggle.
#+begin_src lisp
  (swm-golden-ratio:toggle-golden-ratio)
#+end_src
**** TODO Pomodoro timer
Pomodoro timer to get productive. Menu e keybinding per gestirli.
#+begin_src lisp
  (setf swm-pomodoro:*bell-sound-file* "~/Music/bell.wav")
#+end_src
**** Session manager
#+begin_src lisp
  ;; Manage end of session
  (setf end-session:*end-session-command* "loginctl")
#+end_src
**** TODO Slynk
Creating a slynk server to connect to when performing tweaking. Cerca
le funzioni del tizio di youtube.
#+begin_src lisp
  (slynk:create-server
   :dont-close t)
#+end_src
**** TODO Tray
Come funziona?
**** TODO Weather
Displaying current weather information
#+begin_src lisp
  (setf stumpwm-weather:*open-weather-map-api-key*
        "52a1bf7387593e8ab895b2104f9c0de8"
      
        stumpwm-weather:*units*                 "metric"
        stumpwm-weather:*time-format-str*       "%H:%M:%S"
        stumpwm-weather:*location*              "20129,it"
        stumpwm-weather:*format-str*            "Name: %n | Hum: %H% | Weath: %d | Tmin %T | Tmax %h"
        stumpwm-weather:*mode-line-formatter*   #\E)
  (stumpwm-weather:on)
*** Splitting
Focus the created frame.
#+begin_src lisp
  (defcommand al/hsplit () ()
    (hsplit)
    (move-focus :right))

  (defcommand al/vsplit () ()
    (vsplit)
    (move-focus :down))
#+end_src

*** Syncthing
#+begin_src lisp
  (defvar *syncthing-p* nil
    "Keeps track of Syncthing execution, off by default on startup")

  (defcommand start-syncthing () ()
    "Launch Syncthing if it is not already running"
    (if *syncthing-p*
        (message "Syncthing is already running")
        (progn
          (run-shell-command "syncthing --no-browser &")
          (setf *syncthing-p* t)
          (message "Launching ^6Syncthing^n..."))))

  (defcommand stop-syncthing () ()
    "Stop Syncthing"
    (stumpwm:run-shell-command "killall syncthing")
    (setf *syncthing-p* nil)
    (message "^6Syncthing^n is now stopped."))

  (defcommand toggle-syncthing () ()
    (if *syncthing-p*
        (run-commands "stop-syncthing")
        (run-commands "start-syncthing")))

  ;; modeline status

  (defun get-syncthing-status ()
    (if *syncthing-p*
        (setf *syncthing-ml-status*
              (format nil "^6^f1^f0^n "))
        (setf *syncthing-ml-status* "")))

  (defun ml-fmt-syncthing-status (ml)
    (declare (ignore ml))
    (get-syncthing-status))

  (add-screen-mode-line-formatter #\s #'ml-fmt-syncthing-status)
#+end_src

** Files
#+begin_src lisp
  (al/load "keymaps")
  (al/load "modules")
  (al/load "themes")
#+end_src

** TODO Modules
See [[file:modules.org][Modules]].

** Keymaps
Keymaps to handle modules.
See [[file:keymaps.org][Keymaps]].

** Runners
This section gathers all the program wrappers.
#+begin_src lisp
  ;; Editor
  (defcommand editor () ()
    "run emacs"
    (run-or-raise "emacsclient -c" '(:class "Emacs")))
  (defcommand browser () ()
    "run firefox"
    (run-or-raise "firefox" '(:class "firefox")))
#+end_src

** TODO Themes
*** TODO Current theme
Aggiungere anche i colori di modus-theme-tinted.  L'ordine dei colori
è indicato dalla documentazione di stumpwm e segue uno standard.
#+begin_src lisp
    (setf *colors*
          '(
            "#131220"        ; ^1 ; Dark Blue
            "#f72f33"        ; ^6 ; Red
            "#689d6a"        ; ^4 ; Light Green
            "#fabd2f"        ; ^3 ; Yellow / Help map keys
            "#62bfef"        ; ^4 ; Light Blue
            "#ff99ff"        ; ^2 ; Magenta
            ;; "#a644bf"     ;    ; Old magenta
            "#56b6c2"
            "#cc4a0e"        ; ^7 ; Brown
            "#ffffff"        ; ^0 ; White
            ))      ; ^8 ; Cyan 
#+end_src

*** Other themes
#+begin_src lisp
  ;;; Theme
  ;;; Gavin Freeborn
  ;; (setf *colors*
  ;;       '("#000000"   ;black
  ;;         "#BF6262"   ;red
  ;;         "#a1bf78"   ;green
  ;;         "#dbb774"   ;yellow
  ;;         "#7D8FA3"   ;blue
  ;;         "#ff99ff"   ;magenta
  ;;         "#53cdbd"   ;cyan
  ;;         "#ffffff")) ;white
#+end_src

* TODO APPEAREANCE
Changing themes for the various graphical components. Fare il merge con theme fuori.
** Parameters
#+begin_src lisp
  ;; Input box
  ;; (defparameter *msg-bg-color*     (nth 1 *colors*))
  ;; (defparameter *msg-fg-color*     (nth 0 *colors*))
  ;; (defparameter *msg-border-color* (nth 2 *colors*))
  (defparameter *msg-bg-color*     (nth 0 *colors*))
  (defparameter *msg-fg-color*     (nth 8 *colors*))
  (defparameter *msg-border-color* (nth 5 *colors*))
  ;; Mode-line
  (defparameter *mode-line-bg-color* (nth 0 *colors*))
  (defparameter *mode-line-fg-color* (nth 8 *colors*))
#+end_src

** Borders
#+begin_src lisp
  (set-focus-color         *msg-border-color*)
  (set-win-bg-color        *msg-bg-color*)
  (set-unfocus-color       *msg-bg-color*)
  (set-float-focus-color   *msg-border-color*)
  (set-float-unfocus-color *msg-bg-color*)
#+end_src

** Desktop background
Simply putting a color for a background. It is possible to tweak it differently.
#+begin_src lisp
  ;; set desktop background color
  (setf (xlib:window-background (screen-root (current-screen))) #x47456d)
#+end_src

** TODO Fonts
Muovi in Themes, mantieni l'entry creando il collegamento. Usare qualche simbolo nella modeline.
#+begin_src lisp
  (set-font (list
             (make-instance 'xft:font
                            :family "Hack"
                            :subfamily "Bold"
                            :size 13)
             (make-instance 'xft:font
                            :family "FontAwesome"
                            :subfamily "Regular"
                            :size 14)))
  (xft:cache-fonts)
#+end_src

** Gaps
Allowing gaps for better aesthetics.
#+begin_src lisp
  ;; Head gaps run along the 4 borders of the monitor(s)
  (setf swm-gaps:*head-gaps-size* 0        ;; Head gaps run along the 4 borders of the monitor(s)
        swm-gaps:*inner-gaps-size* 13      ;; Inner gaps run along all the 4 borders of a window
        swm-gaps:*outer-gaps-size* 7)      ;; Outer gaps add more padding to the outermost borders of a window (touching
  ;; the screen border)

  (swm-gaps:toggle-gaps)
#+end_src

** Message/Input box
#+begin_src lisp
  ;; message/input bar colors
  (set-bg-color     *msg-bg-color*)
  (set-fg-color     *msg-fg-color*)
  (set-border-color *msg-border-color*)
#+end_src

** Startup message
#+begin_src lisp
  ;; startup message
  (setf *startup-message* "^6    Stump Window Manager ^8has initialized!
    Press ^6Ctrl+t ? ^8for Help. ^6Never Stop Hacking!^n
              Powered with ^87 Common Lisp ")
#+end_src

** Which-key
#+begin_src lisp
  ;; (setf *key-seq-color* "^3")
  ;; (setf *which-key-format* "~3a -> ~a")
#+end_src

* KEYBINDINGS
Listed alphabetically (with respect to the keybinding). I would like to create a map or a menu for pomodoro timer.
** Applications
#+begin_src lisp
  ;; audio
  (define-key *root-map* (kbd "a") "exec alacritty -e alsamixer")
  ;; alert me
  (define-key *top-map* (kbd "s-a") "alert-me-at")
  ;; browser
  (define-key *root-map* (kbd "b") "browser")
  ;; terminal
  (define-key *root-map* (kbd "c") "exec alacritty")
  ;; launcher
  ;; (define-key *root-map* (kbd "d") "exec dmenu_run -l 10 -p 'What program?' -fn 'Hack' -nb '#0d0e1c' -nf '#ffffff' -sb '#4a4f69'")
  (define-key *root-map* (kbd "d") "exec stumpwm-dmenu_run")
  ;; text editor
  (define-key *root-map* (kbd "e") "editor")
  ;; file manager (graphical)
  (define-key *root-map* (kbd "f") "exec pcmanfm")
  ;; file manager
  (define-key *root-map* (kbd "F") "exec alacritty -e lf")
  ;; g *GROUP-MAP* don't touch
  ;; h *HELP-MAP*  don't touch
  ;; i sioyek
  (define-key *root-map* (kbd "i") "sioyek")
  ;; j todo
  ;; k DELETE-WINDOW don't touch
  ;; l fix?
  (define-key *root-map* (kbd "l") "show-menu")
  ;; m lastmsg don't touch
  ;; n pull-hidden-next don't touch
  (define-key *root-map* (kbd "n") "newsboat")
  ;; o fnext don't touch
  ;; p pull-hidden-previous don't touch
  ;; P
  ;; s-p
  (define-key *top-map* (kbd "s-p") '*al/pomodoro-bindings*)
  ;; q quit-confirm don't touch
  ;; r iresize don't touch
  ;; R don't touch
  ;; s vsplit
  ;; s-s slynk
  ;; S hsplit
  ;; s-S syncthing
  (define-key *top-map* (kbd "s-S") "toggle-syncthing")
  ;; t don't touch
  ;; u todo
  ;; v todo
  ;; w todo
  ;; x *EXCHANGE-WINDOW-MAP* don't touch
  ;; y todo
  ;; z todo
  (define-key *root-map* (kbd "RET") "exec alacritty")
#+end_src

** Backlight
Controlling brightness. Spostare in keybindings
#+begin_src lisp
  (define-key *root-map* (kbd "XF86MonBrightnessUp") "backlight-increase")
  (define-key *root-map* (kbd "XF86MonBrightnessDown") "backlight-decrease")
#+end_src

** Buffers
Handling hidden buffers behind frames.

#+begin_src lisp
  (define-key *top-map* (kbd "s-N") "pull-hidden-next")
  (define-key *top-map* (kbd "s-P") "pull-hidden-previous")
  (define-key *top-map* (kbd "s-S-SPC") "pull-hidden-next")
#+end_src

** Layout
#+begin_src lisp
  ;; Splitting
  (define-key *top-map* (kbd "s-s") "al/vsplit")
  (define-key *top-map* (kbd "s-h") "al/hsplit")

  (define-key *top-map* (kbd "s-r") "remove")
  (define-key *top-map* (kbd "s-R") "iresize")

  (define-key *top-map* (kbd "s-q") "only")

  ;; Resizing
  (define-key *top-map* (kbd "s-z") "iresize")

  ;; keyboard layout
  (define-key *top-map* (kbd "s-SPC") "switch-keyboard-layout")
#+end_src

** Movement
*** Groups
Handling jumping from one group to another with or without windows.

#+begin_src lisp
  (define-key *top-map* (kbd "s-`") "grouplist")

  (define-key *top-map* (kbd "s-C-n") "gselect 1")
  (define-key *top-map* (kbd "s-C-e") "gselect 2")
  (define-key *top-map* (kbd "s-C-o") "gselect 3")
  (define-key *top-map* (kbd "s-C-i") "gselect 4")

  (define-key *top-map* (kbd "s-C-N") "gmove-and-follow 1")
  (define-key *top-map* (kbd "s-C-E") "gmove-and-follow 2")
  (define-key *top-map* (kbd "s-C-O") "gmove-and-follow 3")
  (define-key *top-map* (kbd "s-C-I") "gmove-and-follow 4")
#+end_src

*** Windows
Shifting focus on windows being on different frames and moving them
around.

#+begin_src lisp
  (define-key *top-map* (kbd "s-x") '*al/exchange-window-map*)

  (define-key *top-map* (kbd "s-n") "move-focus left")
  (define-key *top-map* (kbd "s-e") "move-focus down")
  (define-key *top-map* (kbd "s-o") "move-focus up")
  (define-key *top-map* (kbd "s-i") "move-focus right")

  (define-key *top-map* (kbd "s-N") "move-window left")
  (define-key *top-map* (kbd "s-E") "move-window down")
  (define-key *top-map* (kbd "s-O") "move-window up")
  (define-key *top-map* (kbd "s-I") "move-window right")
#+end_src
** Search
Managing the interfaces to different sources for information research.
#+begin_src lisp
;; Various search
(make-web-jump "archlinux"  "firefox https://wiki.archlinux.org/title/")
(make-web-jump "duckduckgo" "firefox https://duckduckgo.com/?q=")
(make-web-jump "libgen"     "firefox http://libgen.li/index.php?req=")
(make-web-jump "wikipedia"  "firefox http://www.wikipedia.org/wiki/")

;; C-t M-s is a terrble binding, but you get the idea.
;; Browse somewhere
(define-key *root-map* (kbd "M-a") "archlinux")
(define-key *root-map* (kbd "M-b") "colon1 exec firefox http://www.")
(define-key *root-map* (kbd "M-s") "duckduckgo")
(define-key *root-map* (kbd "M-S") "libgen")
;; Browse somewhere
(define-key *root-map* (kbd "M-u") "colon1 exec firefox http://www.")
(define-key *root-map* (kbd "M-w") "wikipedia")
#+end_src
** System
Keybindings for managing system.
#+begin_src lisp
  ;; C-a todo
  ;; C-b banish don't touch
  ;; C-c todo
  ;; C-d todo
  ;; C-e todo
  ;; Fullscreen
  (define-key *root-map* (kbd "C-f") "fullscreen")
  (define-key *top-map* (kbd "s-f") "fullscreen")
  ;; C-g don't touch
  (define-key *top-map* (kbd "s-g") "toggle-golden-ratio")
  ;; C-h don't touch
  ;; C-i todo
  ;; C-j todo
  ;; C-k don't touch (fix?)
  ;; Lock screen
  (define-key *root-map* (kbd "C-l") "exec slock")
  ;; C-m fix, todo
  ;; C-n don't touch
  ;; Cycling groups
  (define-key *root-map* (kbd "C-o") "gnext")
  (define-key *root-map* (kbd "C-O") "gnext-with-window")
  ;; C-p don't touch
  ;; C-q todo
  (define-key *root-map* (kbd "C-q") "logout")
  ;; C-r todo
  (define-key *root-map* (kbd "C-r") "restart-computer")
  ;; C-s
  (define-key *root-map* (kbd "C-s") "shutdown-computer")
  (define-key *top-map* (kbd "s-l") "toggle-slynk")
  ;; C-t don't touch
  ;; C-u
  ;; C-v
  ;; C-w
  ;; C-x
  ;; C-y
  ;; C-z
  ;; .
#+end_src
** Volume
#+begin_src lisp
  (define-key *top-map* (kbd "XF86AudioRaiseVolume") "amixer-master-1+")
  (define-key *top-map* (kbd "XF86AudioLowerVolume") "amixer-master-1-")
  (define-key *top-map* (kbd "XF86AudioMute")        "amixer-master-toggle")
#+end_src

* SETTINGS
** Prefix key
This is the prefix key i normally use.
#+begin_src lisp
  (set-prefix-key (kbd "C-t"))
#+end_src

** Completion
#+begin_src lisp
  (setf *input-completion-show-empty* t)
  #+end_src

** Input Devices
*** Keyboard
#+begin_src lisp
  ;; Set keyboard layout
  (setf kbd-layouts:*caps-lock-behavior* :swapped)
  (kbd-layouts:keyboard-layout-list "us -variant workman" "it")
#+end_src
*** Mouse (Trackpad)
#+begin_src lisp
  ;; Focus Follow Mouse
  (setf *mouse-focus-policy* :click)
  ;; bugfix for scrolling doesn't work with an external mouse in GTK+3 Apps
  (setf (getenv "GDK_CORE_DEVICE_EVENTS") "1")
  ;; mouse pointer
  (run-shell-command "xsetroot -cursor_name left_ptr")
#+end_src

** Message/Input box
#+begin_src lisp
  (update-color-map (current-screen))
  ;; message timeout
  (setf *timeout-wait* 3)
#+end_src

** TODO Modeline
Sistemare pomodoro timer.

#+begin_src lisp
  (setf *mode-line-background-color*  *mode-line-bg-color* ; background
        ,*mode-line-foreground-color* *mode-line-fg-color* ; foreground
        ,*mode-line-border-color*     *mode-line-bg-color* ; border
        ,*time-modeline-string*       "^6^f1^f0^n %A, %d %B ^6^f1^f0^n %H:%M" ; time format string
        ,*mode-line-timeout*          5                    ; timeout (mode-line refresh)
        ,*mode-line-border-width*     3                    ; border width
        ,*mode-line-pad-x*            3                    ; text padding in x
        ,*mode-line-pad-y*            3)                   ; text padding in y

  ;; Ordine di comparsa
  (setf *screen-mode-line-format*
        (list "^6[%g]^n "       ; groups
              ;; "^5%t^n "         ; notifications
              "%W"              ; windows
              "^>"              ; right align
              "%S"              ; slynk status
              "%s"              ; syncthing status
              "%B"              ; battery percentage
              "%T"
              "%d"))            ; time/date

  ;; turn on the mode line
  (if (not (head-mode-line (current-head)))
      (toggle-mode-line (current-screen) (current-head)))
#+end_src
*** Formatters
(#\A EMPTY)
(#\a EMPTY)
(#\B #<FUNCTION BATTERY-PERCENTAGE>)
(#\C EMPTY)
(#\c EMPTY)
(#\D EMPTY)
(#\d FMT-MODELINE-TIME)
(#\E STUMPWM-WEATHER::MODE-LINE-STR)
(#\e EMPTY)
(#\F EMPTY)
(#\f EMPTY)
(#\G EMPTY)
(#\g FMT-GROUP-LIST)
(#\H EMPTY)
(#\h FMT-HEAD)
(#\I #<FUNCTION WIFI::FMT-WIFI>)
(#\i EMPTY)
(#\J EMPTY)
(#\j EMPTY)
(#\K EMPTY)
(#\k EMPTY)
(#\L #<FUNCTION KBD-LAYOUTS::CURRENT-KEYBOARD-LAYOUT>)
(#\l EMPTY)
(#\M FMT-ALL-MINOR-MODES)
(#\m FMT-MINOR-MODES)
(#\N NOTIFICATIONS::NOTIFICATIONS-AS-STRING)
(#\n FMT-GROUP)
(#\O EMPTY)
(#\o EMPTY)
(#\P EMPTY)
(#\p EMPTY)
(#\Q EMPTY)
(#\q EMPTY)
(#\R EMPTY)
(#\r EMPTY)
(#\S #<FUNCTION ML-FMT-SLYNK-STATUS>)
(#\s #<FUNCTION ML-FMT-SYNCTHING-STATUS>)
(#\T ?)
(#\t TOMATO:MODELINE)
(#\U EMPTY)
(#\u FMT-URGENT-WINDOW-LIST)
(#\V EMPTY)
(#\v FMT-HEAD-WINDOW-LIST-HIDDEN-WINDOWS)
(#\W FMT-HEAD-WINDOW-LIST)
(#\w FMT-WINDOW-LIST)
(#\X EMPTY)
(#\x EMPTY)
(#\Y EMPTY)
(#\y EMPTY)
(#\Z EMPTY)
(#\z EMPTY)

** Session
#+begin_src lisp
  ;; set DESKTOP_SESSION variable
  (setf (getenv "DESKTOP_SESSION") "stumpwm")
#+end_src

** Windows
*** Borders
#+begin_src lisp
  (setf 
   ;; format
   ,*window-format*                "%m%s%20t"
   ;; gravities
   ,*message-window-gravity*       :center
   ,*message-window-input-gravity* :center
   ,*input-window-gravity*         :center
   ,*input-window-input-gravity*   :center
   ;; border style
   ,*window-border-style*          :thin
   ;; border width
   ,*message-window-padding* 3
   ,*maxsize-border-width*   3
   ,*normal-border-width*    3
   ,*transient-border-width* 3
   stumpwm::*float-window-border*       2
   stumpwm::*float-window-title-height* 2)

  (clear-window-placement-rules)
#+end_src
*** Window Placements
#+begin_src lisp
  ;; Work
  (define-frame-preference "dev"
    ;; frame raise lock (lock AND raise == jumpto)
    (0 t t :class "Emacs")
    (1 t t :class "Alacritty"))
  ;; Read
  (define-frame-preference "read"
    (0 t t :class "sioyek"))
  ;; Web
  (define-frame-preference "web"
    (0 t t :class "firefox"))
#+end_src

